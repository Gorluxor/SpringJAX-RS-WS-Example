
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.spring.soap.ws.address;

import java.util.Vector;
import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

import com.spring.soap.ws.address.types.ContactType;
import com.spring.soap.ws.address.types.ContactsType;

/**
 * This class was generated by Apache CXF 3.2.1
 * 2020-12-26T02:11:43.945+01:00
 * Generated source version: 3.2.1
 * 
 */

@WebService(
                      serviceName = "AddressBookService",
                      portName = "AddressBookPort",
                      targetNamespace = "http://soap.spring.com/ws/address",
                      wsdlLocation = "wsdl/AddressBook.wsdl",
                      endpointInterface = "com.spring.soap.ws.address.AddressBook")
                      
public class AddressBookPortImpl implements AddressBook {

	private Vector<ContactType> contacts = new Vector<ContactType>();

	
    private static final Logger LOG = Logger.getLogger(AddressBookPortImpl.class.getName());

    /* (non-Javadoc)
     * @see com.spring.soap.ws.address.AddressBook#getContact(int index)*
     */
    public ContactType getContact(int index) { 
        LOG.info("Executing operation getContact");
        System.out.println(index);
        try {
        	if(index < contacts.size())
    			return contacts.get(index);
    		else
    			return null;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.spring.soap.ws.address.AddressBook#getAllContacts()*
     */
    public ContactsType getAllContacts() { 
        LOG.info("Executing operation getAllContacts");
        System.out.println("=====getAllContacts invoked====");
        try {
        	ContactsType retVal = new ContactsType();
        	retVal.getValue().addAll(contacts);
        	
        	return retVal;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.spring.soap.ws.address.AddressBook#getContactByName(java.lang.String firstName, java.lang.String lastName)*
     */
    public ContactType getContactByName(java.lang.String firstName, java.lang.String lastName) { 
        LOG.info("Executing operation getContactByName");
        System.out.println("=====getContactByName invoked======" + firstName + " ===" + lastName);
        try {
        	for(ContactType contact : contacts) 
    			if(contact.getFirstName().equals(firstName) && contact.getLastName().equals(lastName))
    				return contact;
        	return null;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.spring.soap.ws.address.AddressBook#addContact(com.spring.soap.ws.address.types.ContactType contact)*
     */
    public void addContact(com.spring.soap.ws.address.types.ContactType contact) { 
        LOG.info("Executing operation addContact");
        System.out.println("=====addContact invoked======" + contact);
        try {
        	contacts.add(contact);
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
